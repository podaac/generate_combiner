#!/usr/local/bin/perl

#  Copyright 2015, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Function to wrap the nfs_lock_file() function by providing a call to nfs_lock_file(), debug printing and checking of the lock
# after lock attempt.  It also allows a way to loop the number of attempts.
#

$GHRSST_PERL_LIB_DIRECTORY = $ENV{GHRSST_PERL_LIB_DIRECTORY};

do "$GHRSST_PERL_LIB_DIRECTORY/nfs_lock_file.pl";

my $debug_flag = 0;

if ($ENV{GHRSST_MODIS_L2_COMBINER_DEBUG_MODE} eq "true") {
    $debug_flag = 1;
}

#------------------------------------------------------------------------------------------------------------------------
sub nfs_lock_file_wrapper {
    my $i_filename_to_lock = shift;
    my $i_max_attempts     = shift;

    # Check to see if the user provided the number of attempts.  If not, assume just once.

    my $MAX_ATTEMPTS_IN_FILE_LOCK = 1;

    if (defined($i_max_attempts)) {
        $MAX_ATTEMPTS_IN_FILE_LOCK = $i_max_attempts;
    }

    # Also check the environment settings to see if it has been set to collect the number of attempts.

    if ($ENV{GHRSST_MODIS_L2_MAX_FILE_LOCK_ATTEMPTS} ne "") {
        # Do a sanity check to make sure it is more than 1.
        if ($ENV{GHRSST_MODIS_L2_MAX_FILE_LOCK_ATTEMPTS} >= 1) {
            $MAX_ATTEMPTS_IN_FILE_LOCK = $ENV{GHRSST_MODIS_L2_MAX_FILE_LOCK_ATTEMPTS};
        } else {
            die("Must set GHRSST_MODIS_L2_MAX_FILE_LOCK_ATTEMPTS environment variable to value greater than or equal to 1.  Current value " . $ENV{GHRSST_MODIS_L2_MAX_FILE_LOCK_ATTEMPTS});
        }
    }

    my $o_wrapper_status = 1; # A value of 1 means the lock has been acquired and 0 means not.

    $g_semaphore_name = $i_filename_to_lock . ".lck";
    my $time_start_waiting = time();

    my $num_attempts = 1;
    my $lock_acquired_flag = 0;

    # Loop until acquired the lock or run out of attempts.

    while (($lock_acquired_flag == 0) && ($num_attempts <= $MAX_ATTEMPTS_IN_FILE_LOCK)) {

        $g_the_lock = nfs_lock_file($g_semaphore_name);

        if ($g_debug) {
            my $time_end_waiting = time();
            my $time_waited = $time_end_waiting - $time_start_waiting;
            print "nfs_lock_file_wrapper: i_filename_to_lock [$i_filename_to_lock]\n";
            print "nfs_lock_file_wrapper: g_semaphore_name [$g_semaphore_name]\n";
            print  " ls -l " . $g_semaphore_name . "*" . "\n";
            system(" ls -l " . $g_semaphore_name . "*");
            print " cat -n " . $g_semaphore_name . "*" . "\n";
            system(" cat -n " . $g_semaphore_name . "*");
            print "g_semaphore_name [$g_semaphore_name]\n";
            print "g_the_lock [$g_the_lock]\n";
        }

        if (!defined($g_the_lock)) {
            log_this("ERROR",$g_routine_name,"LOCK_NOT_ACQUIRED_ON_FILE $i_filename_to_lock ON_ATTEMPT $num_attempts");
        } else {
            $lock_acquired_flag = 1;
        }
        $num_attempts = $num_attempts + 1;
    }

    $o_wrapper_status = $lock_acquired_flag;

    return($o_wrapper_status);
}

#------------------------------------------------------------------------------------------------------------------------
sub log_this {
    # Function to log a message to screen.
    my $i_log_type      = shift;  # Possible types are {INFO,WARN,ERROR}
    my $i_function_name = shift;  # Where the logging is coming from.  Useful in debuging if something goes wrong.
    my $i_log_message   = shift;  # The text you wish to log screen.

    my $now_is = localtime;

    print $now_is . " " . $i_log_type . " [" . $i_function_name . "] " . $i_log_message . "\n";
}
