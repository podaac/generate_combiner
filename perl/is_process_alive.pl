#/usr/local/bin/perl
#  Copyright 2012, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

$GHRSST_PERL_LIB_DIRECTORY = $ENV{GHRSST_PERL_LIB_DIRECTORY};

do "$GHRSST_PERL_LIB_DIRECTORY/log_this.pl";

#------------------------------------------------------------------------------------------------------------------------
sub is_process_alive {
    # Given a job file containing the function name and process id, we will read the job file for the process name process id.  If the process is still alive, 
    # we will report 1 and 0 otherwise.
    my $i_job_name        = shift;
    my $i_processing_type = shift;

    my $o_process_alive_flag = 1;  # Assumes the process is alive.
    my $o_process_id         = 0;  # The process id we are looking for.

    if (-e $i_job_name) {
        # If job exist, remove it by removing the empty file.

        if ($g_debug) {log_this("DEBUG","is_process_alive","cat $i_job_name") };
        my @line_result = readpipe("cat $i_job_name");

        my $num_lines = scalar(@line_result);

        if ($num_lines > 0) {
            my @splitted_tokens = split(' ',$line_result[0]);
            my $function_name = $splitted_tokens[0];
            my $process_id_from_file    = $splitted_tokens[1];
            $o_process_id = $process_id_from_file;  # Save this so we can return it to called.

            # Now look for the process id on the operating system.

            if ($g_debug) { log_this("DEBUG","is_process_alive","ps -ef | grep $function_name grep $i_processing_type | grep perl | grep -v grep") };
            my @line_result = readpipe("ps -ef | grep $function_name | grep $i_processing_type | grep perl | grep -v grep");

            if ($g_debug) {
                foreach $line_from_pipe (@line_result) {
                    chomp($line_from_pipe);  # Remove carriage return.
                    log_this("DEBUG","is_process_alive","LINE_FROM_PIPE:" . $line_from_pipe);
                }
            }

            my $num_lines = scalar(@line_result);
            if ($num_lines > 0) {
                # Because more than one processes with the same name can be running at once, we look for the line containing the exact process id.
                my $line_index = 0;
                my $found_process_id_flag = 0;
                my $a_line = ""; 
                while (($line_index < $num_lines) && ($found_process_id_flag == 0))  {
                    $a_line = $line_result[$line_index];         # Get the line
                    $a_line = strip_extra_white_spaces($a_line); # Remove any extra spaces in between
                    my @splitted_tokens = split(' ',$a_line);    # Split by a space to get to the process id.
                    my $process_id_from_os = $splitted_tokens[1];
    
                    if ($process_id_from_file == $process_id_from_os) {
                        if ($g_debug) { log_this("DEBUG","is_process_alive","Looking for process id [$process_id_from_file] on OS and found it still running.") };
                        $found_process_id_flag = 1;
                    } else {
                        if ($g_debug) { log_this("DEBUG","is_process_alive","Looking for process id [$process_id_from_file] on OS but did not find it.  Process id [$process_id_from_file] is no longer alive on system.") }; 
                    }
                    $line_index += 1;
                }
                $o_process_alive_flag = $found_process_id_flag;

            } else {
                $o_process_alive_flag = 0; # No processes found so we assume the process has died.
            }
         } else {
            # The file is empty, assume it is not alive.
            log_this("WARN","is_process_alive","File [$i_job_name] is empty.  Nothing to do.   Process is considered dead.");
            $o_process_alive_flag = 0;
         }
    } else {
        log_this("WARN","is_process_alive","File [$i_job_name] does not exist.  Process is considered dead.");
        $o_process_alive_flag = 0;  # If cannot delete job, return 0.
    }

    return ($o_process_alive_flag,$o_process_id);
}

#------------------------------------------------------------------------------------------------------------------------
sub strip_extra_white_spaces {
    # Remove any extra spaces to just have one space.
    my $io_stripped_string = shift;
    $io_stripped_string =~ s/\s+/ /g; 
    return $io_stripped_string;
}

