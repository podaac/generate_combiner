#/usr/local/bin/perl
#  Copyright 2012, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

$GHRSST_PERL_LIB_DIRECTORY = $ENV{GHRSST_PERL_LIB_DIRECTORY};
$GHRSST_IDL_LIB_DIRECTORY  = $ENV{GHRSST_IDL_LIB_DIRECTORY};

do "$GHRSST_PERL_LIB_DIRECTORY/is_process_alive.pl";
do "$GHRSST_PERL_LIB_DIRECTORY/log_this.pl";

#------------------------------------------------------------------------------------------------------------------------
sub register_job {
    # Register that a job is running by writing the process info to a file.
    # If a job already exist, we check to see if the process id associated with it is still running on the operating system.
    # If it is not running, we can delete the old job and register a new one.

    my $i_function_name = shift;
    my $i_processing_type = shift;

    my $o_job_register_status = 1;  # If cannot register job, return 0.

    # my $o_job_name = $ENV{HOME} . "/" . $i_function_name . "_" . $i_processing_type . "_job_is_running.txt";    # NET edit.
    my $o_job_name = $ENV{COMBINER_JOB_DIR} . "/" . $i_function_name . "_" . $i_processing_type . "_job_is_running.txt";
    my $o_job_age  = 0;

    my $can_register_job = 0;

    if (-e $o_job_name) {
        #print "register_job:WARN: Job name $o_job_name already exist.\n";
        log_this("INFO","register_job","JOB_NAME_EXIST:Tried to register a new job, but job name $o_job_name already exist.");
        $o_job_register_status = 0;  # If cannot register job, return 0.

        # Get the job's age in seconds.
        my $last_modified_time_of_job = (stat($o_job_name))[9];  # Get last modified time in seconds since 1970
        my $now_is = time;
        $o_job_age = $now_is - $last_modified_time_of_job;

        my ($process_alive_flag,$process_id) = is_process_alive($o_job_name,$i_processing_type);
#print "register_job:process_alive_flag [$process_alive_flag]\n";
        if ($process_alive_flag == 0) {
            log_this("WARN","register_job","Process $process_id associated with $o_job_name is no longer alive.  File [$o_job_name] will be deleted from system so new job can be registered.");
            unlink($o_job_name);
            $can_register_job = 1;
        }
    } else {
        # No such job name exist, we can register our job.
        $can_register_job = 1;
    }

#print "register_job:can_register_job [$can_register_job]\n";

    if ($can_register_job == 1) {
        # No job exist, let's register it by writing job info to file.
        my $call_system_command_str = "touch $o_job_name";
        system("$call_system_command_str");

        # First, we get the process id from the operating system.

#print "readpipe ps -ef | grep $i_function_name | grep perl | grep -v grep\n";

        if ($g_debug) { log_this("DEBUG","register_job","ps -ef | grep $i_function_name | grep $i_processing_type | grep perl | grep -v grep") };
        my @line_result = readpipe("ps -ef | grep $i_function_name |  grep $i_processing_type | grep perl | grep -v grep");

        if ($g_debug) {
           log_this("DEBUG","register_job","NUM_LINES:" . scalar(@line_result));
           foreach $line_from_pipe (@line_result) {
               chomp($line_from_pipe);  # Remove carriage return.
               log_this("DEBUG","register_job","LINE_FROM_PIPE:" . $line_from_pipe);
           }
        }

#print "line_result [";
#print @line_result;
#print "]\n";
    
        my $num_lines = scalar(@line_result);
        if ($num_lines > 0) {
            my @splitted_tokens = split(' ',$line_result[0]);
            my $process_id = $splitted_tokens[1];
#print "register_job: $i_function_name $process_id is now registered.\n";

            system(" echo $i_function_name $process_id >> $o_job_name");
            log_this("INFO",$i_function_name,"REGISTERED_JOB_START " . $process_id . " " . $o_job_name); 
        }
        $o_job_register_status = 1;  # We have registerd the job, return 1.
    } else {
        $o_job_register_status = 0;  # Cannot register the job, return 0.
    }

    return ($o_job_register_status,$o_job_name,$o_job_age);
}
