#!/usr/local/bin/perl
#  Copyright 2016, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Subroutine convert an array of strings into a hash table and return the reference.

use File::Basename;
use File::Copy;

#------------------------------------------------------------------------------------------------------------------------
sub convert_run_log_for_interprocess_communication_historical {

    # Load the run log (an array of strings) into a hash containing these key and values (with the key being the first column and value the rest of the line).
    #
    # This is the format of the run log file:
    #
    #
    # /data/dev/scratch/qchau/scratch/AQUA_REFINED/2015/215/refined_A2015215003000.LAC_GSSTN.nc 71513743 1463614710 000011 1463614699 1463614710 2 6 1 2 3 000001 65544644]
    # /data/dev/scratch/qchau/scratch/AQUA_REFINED/2015/215/refined_A2015215012000.LAC_GSSTN.nc 71513743 1463614711 000010 1463614701 1463614711 2 6 1 2 3 000002 70879547]
    # /data/dev/scratch/qchau/scratch/AQUA_REFINED/2015/215/refined_A2015215003000.LAC_GSSTD.nc 68762852 1463614720 000010 1463614710 1463614720 2 6 2 2 3 000001 65544644]
    # /data/dev/scratch/qchau/scratch/AQUA_REFINED/2015/215/refined_A2015215012000.LAC_GSSTD.nc 68762852 1463614723 000012 1463614711 1463614723 2 6 2 2 3 000002 70879547]
    #
    #
    # filename                                                                                  size in bytes
    #                                                                                                     current time in seconds since 1970
    #                                                                                                               processing duration in seconds
    #                                                                                                                       processing start
    #                                                                                                                                  processing end
    #                                                                                                                                             batch size
    #                                                                                                                                               input directory size
    #                                                                                                                                                number of loops to run
    #                                                                                                                                                  loop count
    #                                                                                                                                                     number of files read
    #                                                                                                                                                      time duration uncompress/move
    #                                                                                                                                                               total number of bytes read.

    my $array_of_lines_ref = shift;

    # De-reference the reference to get access to the actual array of strings.

    my @run_log_array = @$array_of_lines_ref;

    my $routine_name = "convert_run_log_for_interprocess_communication_historical";
    my $debug_module = "convert_run_log_for_interprocess_communication_historical:";
    my $debug_mode   = 0;

    my %o_run_log_for_interprocess_communication_historical = ();

    foreach my $line (@run_log_array) {
        chomp($line);  # Remove the carriage return.

        my @tokens = split /\s/, $line;
        my $actual_tokens = scalar(@tokens);

        # Do a sanity check on the number of tokens returned.  We are expecting at least 2 here.  Other function that parses more of the line may expect more.
        my $NUM_TOKENS_EXPECTED = 2;

        if ($actual_tokens < $NUM_TOKENS_EXPECTED) {
            log_this("WARN",$routine_name,"NUM_TOKENS_EXPECTED $NUM_TOKENS_EXPECTED EXCEEDS ACTUAL_TOKENS $actual_tokens TIME_STATISTICS_WILL_BE_OFF");
            log_this("WARN",$routine_name,"line [$line]");
            next;
        } 

        my $filename     = $tokens[0]; # The first token is the file name
        my $rest_of_line = "";         # Each value of $rest_of_line should be initialized to an empty string to have a fresh start.

        # Collect all the tokens after the first one and save them in $rest_of_line.
        my $token_index = 1;
        do {
            # If this is the first token collected,  don't prepend the space.
            if ($token_index == 1) { 
                $rest_of_line = $rest_of_line .      $tokens[$token_index]; 
            } else {
                # If this is not the first token collected,  do prepend the space before adding the token.
                $rest_of_line = $rest_of_line . " " . $tokens[$token_index]; 
            }
            $token_index += 1;
        } while ($token_index < $actual_tokens);

        if ($debug_mode) {
            log_this("DEBUG",$routine_name,"line [$line]");
            log_this("DEBUG",$routine_name,"filename [$filename] rest_of_line [$rest_of_line]");
        }

        # Save the value and key into the hash table.
        $o_run_log_for_interprocess_communication_historical{$filename} = $rest_of_line;
    }
    my $hash_size = keys %o_run_log_for_interprocess_communication_historical;
    if ($debug_mode) {
        log_this("INFO",$routine_name,"INTERPROCESS_COMMUNICATION HASH_SIZE $hash_size");
    }

    # Return a reference to the just created hash table.  The caller need to de-reference with %$o_run_log_for_interprocess_communication_historical to get access to the actual hash table.
    return (\%o_run_log_for_interprocess_communication_historical);
}

#------------------------------------------------------------------------------------------------------------------------
sub log_this {
    # Function to log a message to screen.
    my $i_log_type      = shift;  # Possible types are {INFO,WARN,ERROR}
    my $i_function_name = shift;  # Where the logging is coming from.  Useful in debuging if something goes wrong.
    my $i_log_message   = shift;  # The text you wish to log screen.

    my $now_is = localtime;

    print $now_is . " " . $i_log_type . " [" . $i_function_name . "] " . $i_log_message . "\n";
}
