#!/usr/local/bin/perl
#  Copyright 2013, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Subroutine to report a sigevent to the sigevent manager.
#
# Assumption(s):
#
#    (1)  The URL to the sigevent manager is valid.
#    (2)  The sigevent description is limit to 255 characters.  Any string longer will be truncated.
#
# A return parameter o_status will be set to 1 if good, and -1 if bad.
#------------------------------------------------------------------------------------------------

use LWP;

$g_debug_flag    = 0;  # A value of 1 will print debug statements.
$g_function_name = "raise_event"; # This function name.

sub raise_sigevent { 

    # Get inputs.

    my $sigevent_url         = shift; 
    my $sigevent_provider    = shift;
    my $sigevent_source      = shift;
    my $sigevent_type        = shift;
    my $sigevent_category    = shift;
    my $sigevent_description = shift;
    my $sigevent_data        = shift; 
    my $sigevent_debug_flag  = shift; 

    # Output parameter(s)

    my $o_status = 1;  # A value of 1 is good, -1 is bad.

    # Set the global debug flag if the user requested it.

    if ($sigevent_debug_flag eq "true") {
        $g_debug_flag = 1;
    }

    # Local variables.

    my $sigevent_format      = 'TEXT';  # This is the default format of a a sigevent.  

    # Get the computer name this script is running on.

    my @result = readpipe('echo $HOST');  # Assumes the environment variable HOST is defined.
    my $host_name = $result[0];           # Get just the first line even if more lines are returned.
    chomp($host_name);                    # Remove the carriage return.
    my $sigevent_computer = $host_name;

    # Do a sanity check on the description length.  Shorten it to length of 255 if it's too long.

    if (length($sigevent_description) > 255)  {
        my $original_description_length = length($sigevent_description);
        if ($g_debug_flag) { print $g_function_name . ":" . "Original description [$sigevent_description]\n"; }
        $sigevent_description = substr($sigevent_description,0,255);
        my $new_description_length = length($sigevent_description);
        if ($g_debug_flag) { print $g_function_name . ":" . "New      description [$sigevent_description]\n"; }
        if ($g_debug_flag) { print $g_function_name . ":" . "WARN:Parameter sigevent_description has been truncated from $original_description_length characters to $new_description_length.\n"; }
    }

    # We need this UserAgent object inorder to post our sigevent.

    my $browser = LWP::UserAgent->new;

    if ($g_debug_flag) { print $g_function_name . ":" . "browser [$browser]\n"; }

    # Build the URL to make the rest service call.
    # Note that the strings "/sigevent/events/create?" are required to create a new sigevent.  This is the expected format to create a new sigevent.

    my $rest_service_call  = $sigevent_url . '/sigevent/events/create?'        .
                                          'format='      . $sigevent_format    . '&' .
                                          'type='        . $sigevent_type      .'&'. 
                                          'category='    . $sigevent_category  .'&'. 
                                          'source='      . $sigevent_source    .'&'. 
                                          'provider='    . $sigevent_provider  .'&'. 
                                          'computer='    . $sigevent_computer  .'&'. 
                                          'data="'       . $sigevent_data    . '"' .'&'. 
                                          'description=' . $sigevent_description;

    if ($g_debug_flag) { print $g_function_name . ":" . "rest_service_call [$rest_service_call]\n"; }

    # Issue request, with an HTTP header.

    my $response = $browser->get($rest_service_call,
                   'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 7.0)',
    );

    if ($g_debug_flag) { print $g_function_name . ":" . "response [$response]\n"; }

    if ($response->is_success) {
        if ($g_debug_flag) { print $g_function_name . ":" . "Content type is [", $response->content_type, "]\n"; }
        if ($g_debug_flag) { print $g_function_name . ":" . "Content is:["; }
        if ($g_debug_flag) { print $g_function_name . ":" . $response->content; }
        if ($g_debug_flag) { print "]\n"; }
    } else {
        print "Error with rest service call [$rest_service_call]\n";
        $o_status = -1;  # A value of 1 is good, -1 is bad.
    }

    return ($o_status);
}
