#!/usr/local/bin/perl

#  Copyright 2012, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Function will call an IDL program to read the global attribute of an uncompressed HDF or NetCDF file to check to see if it is Day, Night, or Mixed.
#------------------------------------------------------------------------------------------------

my $debug_flag = 0;

sub is_granule_night_or_day {

    # Returned status.  Value of 0 means ok, 1 means bad.

    my $o_night_or_day_flag = 'Day';  # Assume if it Day as default.
    my $o_status = 0;                 # A status of 1 is bad, 0 is good.

    # Get input.

    my $i_sst_filename = $_[0]; 

    my $idl_argument_strings = "-args \"$i_sst_filename\" ";

    my @args = ("/usr/local/bin/idl");

    if ($GHRSST_IDL_LIB_DIRECTORY eq '') {
        $GHRSST_IDL_LIB_DIRECTORY = $ENV{GHRSST_IDL_LIB_DIRECTORY};
    }

    # Depends if the name ends with ".nc" we call the appropriate reader.
    # We can also check the environment variable GHRSST_PROCESSING_NETCDF_FILE.
    if ((index($i_sst_filename,".nc") >= 0) || ($ENV{GHRSST_PROCESSING_NETCDF_FILE} eq "true")) {
        $rt_flag = "-quiet -rt=$GHRSST_IDL_LIB_DIRECTORY/is_netcdf_granule_night_or_day.sav";
    } else {
        $rt_flag = "-quiet -rt=$GHRSST_IDL_LIB_DIRECTORY/is_granule_night_or_day.sav";
    }

    $call_system_command_str = "$args[0] $rt_flag $idl_argument_strings";

    if ($debug_flag) { print "call_system_command_str [$call_system_command_str]\n"; }

    my @results_lines = `$call_system_command_str`;

    #
    # Check for errors.
    #

    if ($? == -1) {
            print "is_granule_night_or_day:ERROR: system [$call_system_command_str] failed to execute: $?\n";
            $o_status = 1;
    } elsif ($? == 256){
            print "is_granule_night_or_day:ERROR: Cannot find file in system [$call_system_command_str].\n";
            $o_status = 1;
    } elsif ($? == 0){
#            print "is_granule_night_or_day: system $args[0] < $args[1] executed with: $?\n";
#            print "is_granule_night_or_day: Everything is OK.\n";
            $o_status = 0;
    } else {
            print "is_granule_night_or_day:ERROR: system [$call_system_command_str] executed with: $?\n";
            $o_status = 1;
    }


#print "is_granule_night_or_day: results_lines(size) " . scalar(@results_lines) . "\n";
    foreach my $line (@results_lines ) {
        chomp($line);
#print "is_granule_night_or_day: line [" . $line . "]\n";
        my @splitted_tokens = split(' ',$line);
        my $num_tokens = @splitted_tokens;
        if ($num_tokens == 2) {
            if ($splitted_tokens[0] == 'DAY_OR_NIGHT') {
                $o_night_or_day_flag = $splitted_tokens[1];  # The value we are looking for is the 2nd token.
            }
#print "splitted_tokens[1] [" . $o_night_or_day_flag . "]\n";
        }
    }

    # Look for any error in the result from IDL call so we can return the status.
    # Note: Since calling IDL from Perl, we cannot get a status.  We rely on any output to look for sign of an error.

    foreach my $line (@results_lines ) {
        chomp($line);
        if  ($debug_flag) { print "is_granule_night_or_day: line [" . $line . "]\n"; }
        if (index($line,"ERROR") >= 0)  {
            $o_status = 1;
        }
    }

#print "is_granule_night_or_day: o_status            [" . $o_status. "]\n";
#print "is_granule_night_or_day: o_night_or_day_flag [" . $o_night_or_day_flag . "]\n";

    return($o_status,$o_night_or_day_flag);
}

#my $i_sst_filename = 'A2012248131000.L2_LAC_SST';
#my $night_or_day_flag = is_granule_night_or_day($i_sst_filename);
#print "night_or_day_flag [$night_or_day_flag]\n";
