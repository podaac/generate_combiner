#!/usr/local/bin/perl
#  Copyright 2016, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Subroutine read from a master pipe of processing statistics written by child processes.

$GHRSST_PERL_LIB_DIRECTORY = $ENV{GHRSST_PERL_LIB_DIRECTORY};

use File::Basename;
use File::Copy;

#------------------------------------------------------------------------------------------------------------------------
sub read_master_pipe_for_interprocess_communication_historical {

    my $i_master_pipe = shift;
    
    my $code_portion = "HOUSE_KEEPING:";
    my $print_debug  = 0;
    
    my @o_run_log_array = ();
    
    if ($print_debug) {
        log_this("INFO",$code_portion,"MASTER_PIPE_READ");
    }

    # Note: Since this while loop will run forever waiting for a child to write (even if the child has already close the pipe),
    # we need to determine when to exit by checking for an empty string from the read function <$i_master_pipe>
    
    my $num_lines_read = 0;
    my $one_line = "";
    my $loop_is_done_flag = 0;

    do {
        $one_line = <$i_master_pipe>; # Read from the master pipe we created earlier.
        chomp($one_line);             # Remove the carriage return.

        $num_lines_read += 1;

        if ($print_debug) {
            log_this("INFO",$code_portion,"$num_lines_read [$one_line]");
        }
        # An empty string signifies that we are done with reading.  There shouldn't be any more lines.
        if ($one_line eq "") {
            $loop_is_done_flag = 1;
        } else {
            push (@o_run_log_array,$one_line);
        }
    } while ($loop_is_done_flag != 1);
    
    if (defined ($i_master_pipe)) {
        if ($print_debug) {
                log_this("INFO",$code_portion,"MASTER_PIPE_CLOSE");
        }
        $i_master_pipe->close;
    }
    return(\@o_run_log_array); # Return a reference to the array.
}

#------------------------------------------------------------------------------------------------------------------------
sub log_this {
    # Function to log a message to screen.
    my $i_log_type      = shift;  # Possible types are {INFO,WARN,ERROR}
    my $i_function_name = shift;  # Where the logging is coming from.  Useful in debuging if something goes wrong.
    my $i_log_message   = shift;  # The text you wish to log screen.

    my $now_is = localtime;

    print $now_is . " " . $i_log_type . " [" . $i_function_name . "] " . $i_log_message . "\n";
}
