;  Copyright 2015, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id$
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

FUNCTION write_control_points_variable_to_netcdf,$
             i_filename,$
             i_variable_short_name,$
             i_dataset_array,$
             i_long_name,$
             i_units,$
             i_data_type,$
             i_slope,$
             i_intercept,$
             i_fill_value,$
             i_valid_min,$
             i_valid_max

; Function write a dataset to a NetCDF formatted file.
;
; Assumptions:
;
;   1. The file has been created previously.

;------------------------------------------------------------------------------------------------

; Load constants.

@data_const_config.cfg

; Define local variables.

o_status = SUCCESS;
debug_mode = 0;

; Get the DEBUG_MODE if it is set.

debug_module = 'write_control_points_variable_to_netcdf:';
if (STRUPCASE(GETENV('GHRSST_MODIS_L2_COMBINER_DEBUG_MODE')) EQ 'TRUE') then begin
    debug_mode = 1;
endif

;debug_mode = 1;

; Create the dataset:

size_array = SIZE(i_dataset_array)
num_dims = size_array[0];
num_rows = size_array[1];

; If there is only 1 dimension, the value of num_cols is 1;
if (num_dims EQ 1) then begin
    num_cols = 1;
endif else begin
    num_cols = size_array[2];
endelse

if (debug_mode) then begin
    print, 'write_control_points_variable_to_netcdf: INFO, num_dims = ', num_dims;
    print, 'write_control_points_variable_to_netcdf: INFO, num_rows = ', num_rows;
    print, 'write_control_points_variable_to_netcdf: INFO, num_cols = ', num_cols;
    print, 'write_control_points_variable_to_netcdf: INFO, size_array            = ', size_array; 
    print, 'write_control_points_variable_to_netcdf: INFO, i_data_type           = ', i_data_type;
    print, 'write_control_points_variable_to_netcdf: INFO, i_variable_short_name = ', i_variable_short_name;
    if (N_ELEMENTS(i_units)) then begin
        print, 'write_control_points_variable_to_netcdf: INFO, i_units     = ', i_units;
    endif
    if (N_ELEMENTS(i_slope)) then begin
        print, 'write_control_points_variable_to_netcdf: INFO, i_slope     = ', i_slope;
        print, 'write_control_points_variable_to_netcdf: INFO, SIZE(i_slope,/TNAME) = ', SIZE(i_slope,/TNAME);
    endif
    if (N_ELEMENTS(i_intercept)) then begin
        print, 'write_control_points_variable_to_netcdf: INFO, i_intercept = ', i_intercept;
        print, 'write_control_points_variable_to_netcdf: INFO, SIZE(i_intercept,/TNAME) = ', SIZE(i_intercept,/TNAME);
    endif
endif

; Create a catch block to catch error in interaction with FILE IO
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot open file for update '  + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif

;
; Open NetCDF file for update. 
;

file_id = NCDF_OPEN(i_filename,/WRITE);

;
; Put netCDF file into define mode for writing:
;

CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot set netCDF file into define mode ' + i_filename
    o_status = FAILURE;
    ; Must return immediately.
    NCDF_CLOSE, file_id;
    return, o_status
endif

NCDF_CONTROL, file_id, /REDEF
CATCH, /CANCEL

;
; Get the id's of the lat and lon from file.
;

CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot get the ids for lat, lon and time dimensions in file ' + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    NCDF_CLOSE, file_id;
    return, o_status
endif
dataset_lat_id = NCDF_DIMID(file_id,'nj');
dataset_lon_id = NCDF_DIMID(file_id,'ni');
dataset_time_id = NCDF_DIMID(file_id,'time');
CATCH, /CANCEL

CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Function NCDF_DIMINQ failed for lat, lon and time ids in file ' + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    NCDF_CLOSE, file_id;
    return, o_status
endif

; Get the dimension sizes so we can pass it onto NCDF_VARDEF function.

NCDF_DIMINQ, file_id, dataset_lat_id, lat_variable_name,  lat_size
NCDF_DIMINQ, file_id, dataset_lon_id, lon_variable_name,  lon_size
NCDF_DIMINQ, file_id, dataset_time_id,time_variable_name, time_size
CATCH, /CANCEL


CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot create variable for dataset. Variable = ' + i_variable_short_name + ' in file ' + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif

;
; Create the id for the dataset.  Becareful, the 3rd argument is has
; lat id, lon id, and time id respectively.
;

;    print, 'write_control_points_variable_to_netcdf: INFO, i_data_type = [',i_data_type,']';
case i_data_type of
  'BYTE': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type BYTE';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /BYTE);
      endif else begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /BYTE);
      endelse 
  end
  'LONG': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type LONG';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /LONG);
      endif else begin
          ; For one dimension variables, we have to be aware which variable we are writing so we can use the correct parameter
          ; for NCDF_VARDEF.
          if (i_variable_short_name EQ 'cntl_pt_cols') then begin
              dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_time_id], /LONG);
          endif
          if ((i_variable_short_name EQ 'cntl_pt_rows') OR (i_variable_short_name EQ 'msec')) then begin
              if (i_variable_short_name EQ 'msec') then begin
                  dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /LONG);
              endif else begin
                  dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /LONG);
              endelse
          endif
      endelse
  end
  'SHORT': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type SHORT';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /SHORT);
      endif else begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /SHORT);
      endelse

  end
  'FLOAT': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type FLOAT';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /FLOAT);
      endif else begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /FLOAT);
      endelse
  end
  'DOUBLE': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type DOUBLE';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /DOUBLE);
      endif else begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /DOUBLE);
      endelse
  end
  'INT': begin
      if (debug_mode) then begin
          print, 'write_control_points_variable_to_netcdf: i_data_type INT';
      endif
      if (num_dims EQ 2) then begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lon_id,dataset_lat_id,dataset_time_id], /SHORT);
      endif else begin
          dataset_id = NCDF_VARDEF(file_id, i_variable_short_name, [dataset_lat_id,dataset_time_id], /SHORT);
      endelse
  end
  else: print, 'write_control_points_variable_to_netcdf: ERROR, data type not supported at this point. i_data_type ' + i_data_type;
endcase
CATCH, /CANCEL

;
; Define attributes for the data set variable.
;

;CATCH, error_status
;if (error_status NE 0) then begin
;    CATCH, /CANCEL
;    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot write attributes for file ' + i_filename;
;    o_status = FAILURE;
;    ; Must return immediately.
;    NCDF_CLOSE, file_id;
;    return, o_status
;endif

if (N_ELEMENTS(i_long_name)) then begin
    if (debug_mode) then print, debug_module + 'Writing attribute long_name with value [' + i_long_name + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
    NCDF_ATTPUT,file_id,dataset_id,"long_name",i_long_name;
endif

if (N_ELEMENTS(i_units)) then begin
    ; Only write the attribute if it is not a blank since IDL will crash.
    if (i_units NE '') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute units with value [' + i_units + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
    NCDF_ATTPUT,file_id,dataset_id,"units",i_units;
    endif else begin
        if (debug_mode) then print, debug_module + 'Writing attribute units (skipped) with value [' + i_units + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
    endelse
endif

if (N_ELEMENTS(i_fill_value)) then begin
    if (i_data_type EQ 'LONG') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute _FillValue with value [', i_fill_value, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"_FillValue",i_fill_value, /LONG;
    endif
    if ((i_data_type EQ 'INT') OR (i_data_type EQ 'SHORT')) then begin
        if (debug_mode) then print, debug_module + 'Writing attribute _FillValue with value [', i_fill_value, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"_FillValue",i_fill_value, /SHORT;
    endif
    if (i_data_type EQ 'BYTE') then begin
        ; When printing an attribute of type BYTE, must use /PRINT in the STRING() function to print it correctly.
        if (debug_mode) then print, debug_module + 'Writing attribute _FillValue with value [' + STRING(i_fill_value,/PRINT) + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"_FillValue",i_fill_value, /BYTE;
    endif
    if (i_data_type EQ 'FLOAT') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute _FillValue with value [', i_fill_value, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"_FillValue",i_fill_value, /FLOAT;
    endif
    if (i_data_type EQ 'DOUBLE') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute _FillValue with value [', i_fill_value, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"_FillValue",i_fill_value, /DOUBLE;
    endif
endif

if (N_ELEMENTS(i_valid_min)) then begin
    if (i_data_type EQ 'LONG') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [' + STRING(i_valid_min) + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min, /LONG;
    endif
    if ((i_data_type EQ 'INT') OR (i_data_type EQ 'SHORT')) then begin
        ; We make special case for l2p_flags because these values are unsigned integer.
        if (i_variable_short_name EQ 'l2p_flags') then begin
            if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [', i_valid_min, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
            NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min;
        endif else begin
            if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [', i_valid_min, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
            NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min, /SHORT;
        endelse
    endif
    if (i_data_type EQ 'BYTE') then begin
        ; When printing an attribute of type BYTE, must use /PRINT in the STRING() function to print it correctly.
        if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [' + STRING(i_valid_min,/PRINT) + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min, /BYTE;
    endif
    if (i_data_type EQ 'FLOAT') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [', i_valid_min, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min, /FLOAT;
    endif
    if (i_data_type EQ 'DOUBLE') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_min with value [', i_valid_min, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_min",i_valid_min, /DOUBLE;
    endif
endif

if (N_ELEMENTS(i_valid_max)) then begin
    if (i_data_type EQ 'LONG') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_max with value [', i_valid_max, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_max",i_valid_max, /LONG;
    endif
    if ((i_data_type EQ 'INT') OR (i_data_type EQ 'SHORT')) then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_max with value [', i_valid_max, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_max",i_valid_max, /SHORT;
    endif
    if (i_data_type EQ 'BYTE') then begin
        ; When printing an attribute of type BYTE, must use /PRINT in the STRING() function to print it correctly.
        if (debug_mode) then print, debug_module + 'Writing attribute valid_max with value [' + STRING(i_valid_max,/PRINT) + '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_max",i_valid_max, /BYTE;
    endif
    if (i_data_type EQ 'FLOAT') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_max with value [', i_valid_max, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_max",i_valid_max, /FLOAT;
    endif
    if (i_data_type EQ 'DOUBLE') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute valid_max with value [', i_valid_max, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"valid_max",i_valid_max, /DOUBLE;
    endif
endif

if (N_ELEMENTS(i_slope)) then begin
    ; Only print non-STRING attribute.
    if (SIZE(i_slope,/TNAME) NE 'STRING') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute scale_factor with value [', i_slope, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"scale_factor",i_slope;
    endif
endif

if (debug_mode) then print, 'write_control_points_variable_to_netcdf: i_intercept = [', i_intercept, ']'
if (N_ELEMENTS(i_intercept)) then begin
    ; Only print non-STRING attribute.
    if (SIZE(i_intercept,/TNAME) NE 'STRING') then begin
        if (debug_mode) then print, debug_module + 'Writing attribute add_offset with value [', i_intercept, '] to variable ' + i_variable_short_name + ' to file ' + i_filename; 
        NCDF_ATTPUT,file_id,dataset_id,"add_offset",i_intercept;
    endif
endif

;
; Put netCDF file out of define mode and into data mode for writing:
;

CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot set netCDF file into data mode for file '  + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    NCDF_CLOSE, file_id;
    return, o_status
endif

NCDF_CONTROL, file_id, /ENDEF
CATCH, /CANCEL

;
; Write the data set to netCDF file.
;

CATCH, error_status
if (error_status NE 0) then begin
   CATCH, /CANCEL
    print, 'write_control_points_variable_to_netcdf: ERROR, Cannot write dataset ' + i_variable_short_name + ' to file ' + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    NCDF_CLOSE, file_id;
    return, o_status
endif

NCDF_VARPUT, file_id, dataset_id, i_dataset_array;
CATCH, /CANCEL

; ---------- Close up shop ---------- 
if (debug_mode) then begin
    print, 'write_control_points_variable_to_netcdf: WRITE_VARIABLE ' + i_variable_short_name + ' TO_FILE ' + i_filename;
endif
NCDF_CLOSE, file_id;

;if (i_variable_short_name EQ 'sst') then begin
;   stop;
;endif


return, o_status
end
